package bot_service

import (
	"fmt"
	"strings"

	"github.com/PaulSonOfLars/gotgbot/v2"
	"github.com/root9464/Ton-students/shared/logger"
	"github.com/root9464/Ton-students/config"
)

type BotService struct {
	config *config.Config
	logger *logger.Logger
}

func NewBotService(config *config.Config, logger *logger.Logger) *BotService {
	return &BotService{
		config: config,
		logger: logger,
	}
}

// Start - –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
func (s *BotService) Start(b *gotgbot.Bot, userID int64) error {
	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	s.logger.Info(fmt.Sprintf("Start command received from user %d", userID))

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	_, err := b.SendMessage(userID, "Hello! How can I help you?", nil)
	if err != nil {
		s.logger.Error("Error sending start message: " + err.Error())
	}
	return err
}

// SupportStart - –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /support
func (s *BotService) SupportStart(b *gotgbot.Bot, userID int64, args []string) error {
	// –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
	if len(args) == 0 {
		_, err := b.SendMessage(userID, "‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å</b>\n\n–ü—Ä–∏–º–µ—Ä:\n<code>/support –ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?</code>", &gotgbot.SendMessageOpts{ParseMode: "HTML"})
		return err
	}

	// –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
	question := strings.Join(args, " ")
	s.logger.Info(fmt.Sprintf("Received support question from user %d: %s", userID, question))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	_, err := b.SendMessage(s.config.AdminId, fmt.Sprintf("üì© <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @%s\n<b>ID:</b> <code>%d</code>\n\n<b>–í–æ–ø—Ä–æ—Å:</b>\n%s", userID, userID, question), &gotgbot.SendMessageOpts{ParseMode: "HTML"})
	if err != nil {
		s.logger.Error("Error sending support message to admin: " + err.Error())
	}

	// –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	_, err = b.SendMessage(userID, "‚úÖ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", &gotgbot.SendMessageOpts{ParseMode: "HTML"})
	return err
}

// SupportReply - –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
func (s *BotService) SupportReply(b *gotgbot.Bot, adminID int64, userID int64, messageText string) error {
	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	_, err := b.SendMessage(userID, fmt.Sprintf("üì¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n%s", messageText), &gotgbot.SendMessageOpts{ParseMode: "HTML"})
	if err != nil {
		s.logger.Error("Error sending response to user: " + err.Error())
		return err
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	_, err = b.SendMessage(adminID, "‚úÖ <b>–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.</b>", &gotgbot.SendMessageOpts{ParseMode: "HTML"})
	return err
}
