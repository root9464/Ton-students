package bot_service

import (
	"fmt"
	"strconv"
	"strings"
	"sync"

	"github.com/PaulSonOfLars/gotgbot/v2"
	"github.com/PaulSonOfLars/gotgbot/v2/ext"
	"github.com/root9464/Ton-students/config"
	"github.com/root9464/Ton-students/shared/logger"
	"github.com/sirupsen/logrus"
)

var replyState = struct {
	mu     sync.Mutex
	active map[int64]int64
}{
	active: make(map[int64]int64),
}

type BotService struct {
	config *config.Config
	logger *logger.Logger
}

func NewBotService(config *config.Config, logger *logger.Logger) *BotService {
	return &BotService{
		config: config,
		logger: logger,
	}
}

// Start - –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
func Start(b *gotgbot.Bot, ctx *ext.Context, channelid int64, log *logrus.Logger) error {
	userID := ctx.EffectiveUser.Id

	log.WithFields(logrus.Fields{
		"userID": userID,
	}).Info("Start command received")

	member, err := b.GetChatMember(channelid, userID, nil)
	if err != nil {
		log.WithError(err).Error("Error checking subscription status")
		_, _ = ctx.EffectiveMessage.Reply(b, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return err
	}

	memberStatus := member.GetStatus()
	log.WithFields(logrus.Fields{
		"userID":       userID,
		"memberStatus": memberStatus,
	}).Info("Subscription status checked")

	if memberStatus != "member" && memberStatus != "administrator" && memberStatus != "creator" {
		_, err := ctx.EffectiveMessage.Chat.SendMessage(b,
			"–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª [–∑–¥–µ—Å—å](https://t.me/+M3Gb_96fCzNhMWFi)",
			nil,
		)
		if err != nil {
			log.WithError(err).Error("Error sending subscription requirement message")
		}
		return nil
	}

	_, err = b.SendMessage(ctx.EffectiveChat.Id, "Hello! How can I help you?", nil)
	if err != nil {
		log.WithError(err).Error("Error sending welcome message")
		return err
	}

	log.WithFields(logrus.Fields{
		"userID": userID,
	}).Info("Welcome message sent successfully")

	return nil
}

// SupportStart - –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /support
func SupportStart(b *gotgbot.Bot, ctx *ext.Context, adminID int64, log *logrus.Logger) error {
	log.Info("SupportStart called by user ID:", ctx.EffectiveUser.Id)
	fmt.Println()

	userID := ctx.EffectiveUser.Id
	args := ctx.Args()

	if len(args) == 0 {
		_, err := ctx.EffectiveMessage.Reply(b,
			"‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å</b>\n\n–ü—Ä–∏–º–µ—Ä:\n<code>/support –ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?</code>",
			&gotgbot.SendMessageOpts{ParseMode: "HTML"})
		return err
	}

	question := strings.Join(args, " ")
	log.WithFields(logrus.Fields{
		"userID":   userID,
		"question": question,
	}).Info("Received support question")

	_, err := b.SendMessage(adminID,
		fmt.Sprintf(
			"üì© <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @%s\n<b>ID:</b> <code>%d</code>\n\n<b>–í–æ–ø—Ä–æ—Å:</b>\n%s",
			ctx.EffectiveUser.Username, userID, question),
		&gotgbot.SendMessageOpts{ParseMode: "HTML"})
	if err != nil {
		log.Error(err)
		return err
	}

	_, err = b.SendMessage(userID,
		"‚úÖ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
		&gotgbot.SendMessageOpts{ParseMode: "HTML"})
	if err != nil {
		log.Error(err)
		return err
	}

	replyMarkup := &gotgbot.InlineKeyboardMarkup{
		InlineKeyboard: [][]gotgbot.InlineKeyboardButton{
			{
				{
					Text:         "–û—Ç–≤–µ—Ç–∏—Ç—å",
					CallbackData: fmt.Sprintf("reply_%d", userID),
				},
			},
		},
	}
	_, err = b.SendMessage(adminID,
		"üë§ <b>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>",
		&gotgbot.SendMessageOpts{
			ParseMode:   "HTML",
			ReplyMarkup: replyMarkup,
		})
	return err
}

// SupportReply - –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
func SupportReply(b *gotgbot.Bot, ctx *ext.Context, log *logrus.Logger) error {
	callbackData := ctx.CallbackQuery.Data
	log.Info("SupportReply called with callbackData:", callbackData)

	userIDStr := strings.TrimPrefix(callbackData, "reply_")
	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		log.Error("Error parsing userID from callbackData:", err)
		return err
	}

	replyState.mu.Lock()
	replyState.active[ctx.EffectiveUser.Id] = userID
	replyState.mu.Unlock()

	_, err = b.SendMessage(ctx.EffectiveUser.Id,
		"‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>",
		&gotgbot.SendMessageOpts{ParseMode: "HTML"})
	return err
}

func SendAdminResponse(b *gotgbot.Bot, ctx *ext.Context, log *logrus.Logger) error {
	adminID := ctx.EffectiveUser.Id
	messageText := ctx.EffectiveMessage.Text
	fmt.Println(replyState.active)

	log.WithFields(logrus.Fields{
		"adminID": adminID,
		"message": messageText,
	}).Info("SendAdminResponse called")

	replyState.mu.Lock()
	userID, ok := replyState.active[adminID]
	if !ok {
		replyState.mu.Unlock()
		_, err := b.SendMessage(adminID,
			"‚ö†Ô∏è <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.</b>\n\n–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Ç–≤–µ—Ç–∏—Ç—å\".",
			&gotgbot.SendMessageOpts{ParseMode: "HTML"})
		return err
	}
	delete(replyState.active, adminID)
	replyState.mu.Unlock()

	_, err := b.SendMessage(userID,
		fmt.Sprintf(
			"üì¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n%s",
			messageText),
		&gotgbot.SendMessageOpts{ParseMode: "HTML"})
	if err != nil {
		log.Error(err)
		return err
	}

	_, err = b.SendMessage(adminID,
		"‚úÖ <b>–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.</b>",
		&gotgbot.SendMessageOpts{ParseMode: "HTML"})
	return err
}
