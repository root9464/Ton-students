// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/root9464/Ton-students/ent/predicate"
	"github.com/root9464/Ton-students/ent/service"
	"github.com/root9464/Ton-students/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetFirstname sets the "firstname" field.
func (uu *UserUpdate) SetFirstname(s string) *UserUpdate {
	uu.mutation.SetFirstname(s)
	return uu
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstname(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstname(*s)
	}
	return uu
}

// SetLastname sets the "lastname" field.
func (uu *UserUpdate) SetLastname(s string) *UserUpdate {
	uu.mutation.SetLastname(s)
	return uu
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastname(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastname(*s)
	}
	return uu
}

// SetNickname sets the "nickname" field.
func (uu *UserUpdate) SetNickname(s string) *UserUpdate {
	uu.mutation.SetNickname(s)
	return uu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNickname(s *string) *UserUpdate {
	if s != nil {
		uu.SetNickname(*s)
	}
	return uu
}

// SetSelectedName sets the "selectedName" field.
func (uu *UserUpdate) SetSelectedName(un user.SelectedName) *UserUpdate {
	uu.mutation.SetSelectedName(un)
	return uu
}

// SetNillableSelectedName sets the "selectedName" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSelectedName(un *user.SelectedName) *UserUpdate {
	if un != nil {
		uu.SetSelectedName(*un)
	}
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(u user.Role) *UserUpdate {
	uu.mutation.SetRole(u)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(u *user.Role) *UserUpdate {
	if u != nil {
		uu.SetRole(*u)
	}
	return uu
}

// SetInfo sets the "info" field.
func (uu *UserUpdate) SetInfo(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetInfo(m)
	return uu
}

// SetIsPremium sets the "isPremium" field.
func (uu *UserUpdate) SetIsPremium(b bool) *UserUpdate {
	uu.mutation.SetIsPremium(b)
	return uu
}

// SetNillableIsPremium sets the "isPremium" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsPremium(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsPremium(*b)
	}
	return uu
}

// SetHash sets the "hash" field.
func (uu *UserUpdate) SetHash(s string) *UserUpdate {
	uu.mutation.SetHash(s)
	return uu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetHash(*s)
	}
	return uu
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (uu *UserUpdate) AddServiceIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddServiceIDs(ids...)
	return uu
}

// AddServices adds the "services" edges to the Service entity.
func (uu *UserUpdate) AddServices(s ...*Service) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddServiceIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearServices clears all "services" edges to the Service entity.
func (uu *UserUpdate) ClearServices() *UserUpdate {
	uu.mutation.ClearServices()
	return uu
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (uu *UserUpdate) RemoveServiceIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveServiceIDs(ids...)
	return uu
}

// RemoveServices removes "services" edges to Service entities.
func (uu *UserUpdate) RemoveServices(s ...*Service) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveServiceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.SelectedName(); ok {
		if err := user.SelectedNameValidator(v); err != nil {
			return &ValidationError{Name: "selectedName", err: fmt.Errorf(`ent: validator failed for field "User.selectedName": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Hash(); ok {
		if err := user.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "User.hash": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Firstname(); ok {
		_spec.SetField(user.FieldFirstname, field.TypeString, value)
	}
	if value, ok := uu.mutation.Lastname(); ok {
		_spec.SetField(user.FieldLastname, field.TypeString, value)
	}
	if value, ok := uu.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := uu.mutation.SelectedName(); ok {
		_spec.SetField(user.FieldSelectedName, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Info(); ok {
		_spec.SetField(user.FieldInfo, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.IsPremium(); ok {
		_spec.SetField(user.FieldIsPremium, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Hash(); ok {
		_spec.SetField(user.FieldHash, field.TypeString, value)
	}
	if uu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServicesTable,
			Columns: []string{user.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedServicesIDs(); len(nodes) > 0 && !uu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServicesTable,
			Columns: []string{user.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServicesTable,
			Columns: []string{user.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetFirstname sets the "firstname" field.
func (uuo *UserUpdateOne) SetFirstname(s string) *UserUpdateOne {
	uuo.mutation.SetFirstname(s)
	return uuo
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstname(*s)
	}
	return uuo
}

// SetLastname sets the "lastname" field.
func (uuo *UserUpdateOne) SetLastname(s string) *UserUpdateOne {
	uuo.mutation.SetLastname(s)
	return uuo
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastname(*s)
	}
	return uuo
}

// SetNickname sets the "nickname" field.
func (uuo *UserUpdateOne) SetNickname(s string) *UserUpdateOne {
	uuo.mutation.SetNickname(s)
	return uuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNickname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNickname(*s)
	}
	return uuo
}

// SetSelectedName sets the "selectedName" field.
func (uuo *UserUpdateOne) SetSelectedName(un user.SelectedName) *UserUpdateOne {
	uuo.mutation.SetSelectedName(un)
	return uuo
}

// SetNillableSelectedName sets the "selectedName" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSelectedName(un *user.SelectedName) *UserUpdateOne {
	if un != nil {
		uuo.SetSelectedName(*un)
	}
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(u user.Role) *UserUpdateOne {
	uuo.mutation.SetRole(u)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(u *user.Role) *UserUpdateOne {
	if u != nil {
		uuo.SetRole(*u)
	}
	return uuo
}

// SetInfo sets the "info" field.
func (uuo *UserUpdateOne) SetInfo(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetInfo(m)
	return uuo
}

// SetIsPremium sets the "isPremium" field.
func (uuo *UserUpdateOne) SetIsPremium(b bool) *UserUpdateOne {
	uuo.mutation.SetIsPremium(b)
	return uuo
}

// SetNillableIsPremium sets the "isPremium" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsPremium(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsPremium(*b)
	}
	return uuo
}

// SetHash sets the "hash" field.
func (uuo *UserUpdateOne) SetHash(s string) *UserUpdateOne {
	uuo.mutation.SetHash(s)
	return uuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetHash(*s)
	}
	return uuo
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (uuo *UserUpdateOne) AddServiceIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddServiceIDs(ids...)
	return uuo
}

// AddServices adds the "services" edges to the Service entity.
func (uuo *UserUpdateOne) AddServices(s ...*Service) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddServiceIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearServices clears all "services" edges to the Service entity.
func (uuo *UserUpdateOne) ClearServices() *UserUpdateOne {
	uuo.mutation.ClearServices()
	return uuo
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (uuo *UserUpdateOne) RemoveServiceIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveServiceIDs(ids...)
	return uuo
}

// RemoveServices removes "services" edges to Service entities.
func (uuo *UserUpdateOne) RemoveServices(s ...*Service) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveServiceIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.SelectedName(); ok {
		if err := user.SelectedNameValidator(v); err != nil {
			return &ValidationError{Name: "selectedName", err: fmt.Errorf(`ent: validator failed for field "User.selectedName": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Hash(); ok {
		if err := user.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "User.hash": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Firstname(); ok {
		_spec.SetField(user.FieldFirstname, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Lastname(); ok {
		_spec.SetField(user.FieldLastname, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := uuo.mutation.SelectedName(); ok {
		_spec.SetField(user.FieldSelectedName, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Info(); ok {
		_spec.SetField(user.FieldInfo, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.IsPremium(); ok {
		_spec.SetField(user.FieldIsPremium, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Hash(); ok {
		_spec.SetField(user.FieldHash, field.TypeString, value)
	}
	if uuo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServicesTable,
			Columns: []string{user.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedServicesIDs(); len(nodes) > 0 && !uuo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServicesTable,
			Columns: []string{user.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServicesTable,
			Columns: []string{user.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
