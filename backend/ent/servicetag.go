// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/root9464/Ton-students/ent/service"
	"github.com/root9464/Ton-students/ent/servicetag"
	"github.com/root9464/Ton-students/ent/tags"
)

// ServiceTag is the model entity for the ServiceTag schema.
type ServiceTag struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceTagQuery when eager-loading is set.
	Edges               ServiceTagEdges `json:"edges"`
	service_tag_service *uuid.UUID
	service_tag_tag     *uuid.UUID
	selectValues        sql.SelectValues
}

// ServiceTagEdges holds the relations/edges for other nodes in the graph.
type ServiceTagEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *Tags `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceTagEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceTagEdges) TagOrErr() (*Tags, error) {
	if e.Tag != nil {
		return e.Tag, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tags.Label}
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicetag.FieldID:
			values[i] = new(uuid.UUID)
		case servicetag.ForeignKeys[0]: // service_tag_service
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case servicetag.ForeignKeys[1]: // service_tag_tag
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceTag fields.
func (st *ServiceTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicetag.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				st.ID = *value
			}
		case servicetag.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field service_tag_service", values[i])
			} else if value.Valid {
				st.service_tag_service = new(uuid.UUID)
				*st.service_tag_service = *value.S.(*uuid.UUID)
			}
		case servicetag.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field service_tag_tag", values[i])
			} else if value.Valid {
				st.service_tag_tag = new(uuid.UUID)
				*st.service_tag_tag = *value.S.(*uuid.UUID)
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceTag.
// This includes values selected through modifiers, order, etc.
func (st *ServiceTag) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryService queries the "service" edge of the ServiceTag entity.
func (st *ServiceTag) QueryService() *ServiceQuery {
	return NewServiceTagClient(st.config).QueryService(st)
}

// QueryTag queries the "tag" edge of the ServiceTag entity.
func (st *ServiceTag) QueryTag() *TagsQuery {
	return NewServiceTagClient(st.config).QueryTag(st)
}

// Update returns a builder for updating this ServiceTag.
// Note that you need to call ServiceTag.Unwrap() before calling this method if this ServiceTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ServiceTag) Update() *ServiceTagUpdateOne {
	return NewServiceTagClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the ServiceTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *ServiceTag) Unwrap() *ServiceTag {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceTag is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ServiceTag) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceTag(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceTags is a parsable slice of ServiceTag.
type ServiceTags []*ServiceTag
