// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/root9464/Ton-students/ent/tags"
)

// Tags is the model entity for the Tags schema.
type Tags struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TagName holds the value of the "tagName" field.
	TagName string `json:"tagName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TagsQuery when eager-loading is set.
	Edges        TagsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TagsEdges holds the relations/edges for other nodes in the graph.
type TagsEdges struct {
	// ServiceTags holds the value of the service_tags edge.
	ServiceTags []*ServiceTag `json:"service_tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServiceTagsOrErr returns the ServiceTags value or an error if the edge
// was not loaded in eager-loading.
func (e TagsEdges) ServiceTagsOrErr() ([]*ServiceTag, error) {
	if e.loadedTypes[0] {
		return e.ServiceTags, nil
	}
	return nil, &NotLoadedError{edge: "service_tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tags) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tags.FieldTagName:
			values[i] = new(sql.NullString)
		case tags.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tags fields.
func (t *Tags) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tags.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case tags.FieldTagName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tagName", values[i])
			} else if value.Valid {
				t.TagName = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tags.
// This includes values selected through modifiers, order, etc.
func (t *Tags) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryServiceTags queries the "service_tags" edge of the Tags entity.
func (t *Tags) QueryServiceTags() *ServiceTagQuery {
	return NewTagsClient(t.config).QueryServiceTags(t)
}

// Update returns a builder for updating this Tags.
// Note that you need to call Tags.Unwrap() before calling this method if this Tags
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tags) Update() *TagsUpdateOne {
	return NewTagsClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tags entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tags) Unwrap() *Tags {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tags is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tags) String() string {
	var builder strings.Builder
	builder.WriteString("Tags(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("tagName=")
	builder.WriteString(t.TagName)
	builder.WriteByte(')')
	return builder.String()
}

// TagsSlice is a parsable slice of Tags.
type TagsSlice []*Tags
