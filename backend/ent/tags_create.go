// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/root9464/Ton-students/ent/servicetag"
	"github.com/root9464/Ton-students/ent/tags"
)

// TagsCreate is the builder for creating a Tags entity.
type TagsCreate struct {
	config
	mutation *TagsMutation
	hooks    []Hook
}

// SetTagName sets the "tagName" field.
func (tc *TagsCreate) SetTagName(s string) *TagsCreate {
	tc.mutation.SetTagName(s)
	return tc
}

// SetID sets the "id" field.
func (tc *TagsCreate) SetID(u uuid.UUID) *TagsCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TagsCreate) SetNillableID(u *uuid.UUID) *TagsCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// AddServiceTagIDs adds the "service_tags" edge to the ServiceTag entity by IDs.
func (tc *TagsCreate) AddServiceTagIDs(ids ...uuid.UUID) *TagsCreate {
	tc.mutation.AddServiceTagIDs(ids...)
	return tc
}

// AddServiceTags adds the "service_tags" edges to the ServiceTag entity.
func (tc *TagsCreate) AddServiceTags(s ...*ServiceTag) *TagsCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tc.AddServiceTagIDs(ids...)
}

// Mutation returns the TagsMutation object of the builder.
func (tc *TagsCreate) Mutation() *TagsMutation {
	return tc.mutation
}

// Save creates the Tags in the database.
func (tc *TagsCreate) Save(ctx context.Context) (*Tags, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TagsCreate) SaveX(ctx context.Context) *Tags {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TagsCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TagsCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TagsCreate) defaults() {
	if _, ok := tc.mutation.ID(); !ok {
		v := tags.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TagsCreate) check() error {
	if _, ok := tc.mutation.TagName(); !ok {
		return &ValidationError{Name: "tagName", err: errors.New(`ent: missing required field "Tags.tagName"`)}
	}
	if v, ok := tc.mutation.TagName(); ok {
		if err := tags.TagNameValidator(v); err != nil {
			return &ValidationError{Name: "tagName", err: fmt.Errorf(`ent: validator failed for field "Tags.tagName": %w`, err)}
		}
	}
	return nil
}

func (tc *TagsCreate) sqlSave(ctx context.Context) (*Tags, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TagsCreate) createSpec() (*Tags, *sqlgraph.CreateSpec) {
	var (
		_node = &Tags{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tags.Table, sqlgraph.NewFieldSpec(tags.FieldID, field.TypeUUID))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.TagName(); ok {
		_spec.SetField(tags.FieldTagName, field.TypeString, value)
		_node.TagName = value
	}
	if nodes := tc.mutation.ServiceTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tags.ServiceTagsTable,
			Columns: []string{tags.ServiceTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TagsCreateBulk is the builder for creating many Tags entities in bulk.
type TagsCreateBulk struct {
	config
	err      error
	builders []*TagsCreate
}

// Save creates the Tags entities in the database.
func (tcb *TagsCreateBulk) Save(ctx context.Context) ([]*Tags, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tags, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TagsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TagsCreateBulk) SaveX(ctx context.Context) []*Tags {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TagsCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TagsCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
