// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/root9464/Ton-students/ent/predicate"
	"github.com/root9464/Ton-students/ent/service"
	"github.com/root9464/Ton-students/ent/servicetag"
	"github.com/root9464/Ton-students/ent/tags"
)

// ServiceTagUpdate is the builder for updating ServiceTag entities.
type ServiceTagUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceTagMutation
}

// Where appends a list predicates to the ServiceTagUpdate builder.
func (stu *ServiceTagUpdate) Where(ps ...predicate.ServiceTag) *ServiceTagUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (stu *ServiceTagUpdate) SetServiceID(id uuid.UUID) *ServiceTagUpdate {
	stu.mutation.SetServiceID(id)
	return stu
}

// SetService sets the "service" edge to the Service entity.
func (stu *ServiceTagUpdate) SetService(s *Service) *ServiceTagUpdate {
	return stu.SetServiceID(s.ID)
}

// SetTagID sets the "tag" edge to the Tags entity by ID.
func (stu *ServiceTagUpdate) SetTagID(id uuid.UUID) *ServiceTagUpdate {
	stu.mutation.SetTagID(id)
	return stu
}

// SetTag sets the "tag" edge to the Tags entity.
func (stu *ServiceTagUpdate) SetTag(t *Tags) *ServiceTagUpdate {
	return stu.SetTagID(t.ID)
}

// Mutation returns the ServiceTagMutation object of the builder.
func (stu *ServiceTagUpdate) Mutation() *ServiceTagMutation {
	return stu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (stu *ServiceTagUpdate) ClearService() *ServiceTagUpdate {
	stu.mutation.ClearService()
	return stu
}

// ClearTag clears the "tag" edge to the Tags entity.
func (stu *ServiceTagUpdate) ClearTag() *ServiceTagUpdate {
	stu.mutation.ClearTag()
	return stu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ServiceTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ServiceTagUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ServiceTagUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ServiceTagUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *ServiceTagUpdate) check() error {
	if stu.mutation.ServiceCleared() && len(stu.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceTag.service"`)
	}
	if stu.mutation.TagCleared() && len(stu.mutation.TagIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceTag.tag"`)
	}
	return nil
}

func (stu *ServiceTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servicetag.Table, servicetag.Columns, sqlgraph.NewFieldSpec(servicetag.FieldID, field.TypeUUID))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if stu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetag.ServiceTable,
			Columns: []string{servicetag.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetag.ServiceTable,
			Columns: []string{servicetag.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetag.TagTable,
			Columns: []string{servicetag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tags.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetag.TagTable,
			Columns: []string{servicetag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tags.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicetag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// ServiceTagUpdateOne is the builder for updating a single ServiceTag entity.
type ServiceTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceTagMutation
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (stuo *ServiceTagUpdateOne) SetServiceID(id uuid.UUID) *ServiceTagUpdateOne {
	stuo.mutation.SetServiceID(id)
	return stuo
}

// SetService sets the "service" edge to the Service entity.
func (stuo *ServiceTagUpdateOne) SetService(s *Service) *ServiceTagUpdateOne {
	return stuo.SetServiceID(s.ID)
}

// SetTagID sets the "tag" edge to the Tags entity by ID.
func (stuo *ServiceTagUpdateOne) SetTagID(id uuid.UUID) *ServiceTagUpdateOne {
	stuo.mutation.SetTagID(id)
	return stuo
}

// SetTag sets the "tag" edge to the Tags entity.
func (stuo *ServiceTagUpdateOne) SetTag(t *Tags) *ServiceTagUpdateOne {
	return stuo.SetTagID(t.ID)
}

// Mutation returns the ServiceTagMutation object of the builder.
func (stuo *ServiceTagUpdateOne) Mutation() *ServiceTagMutation {
	return stuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (stuo *ServiceTagUpdateOne) ClearService() *ServiceTagUpdateOne {
	stuo.mutation.ClearService()
	return stuo
}

// ClearTag clears the "tag" edge to the Tags entity.
func (stuo *ServiceTagUpdateOne) ClearTag() *ServiceTagUpdateOne {
	stuo.mutation.ClearTag()
	return stuo
}

// Where appends a list predicates to the ServiceTagUpdate builder.
func (stuo *ServiceTagUpdateOne) Where(ps ...predicate.ServiceTag) *ServiceTagUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ServiceTagUpdateOne) Select(field string, fields ...string) *ServiceTagUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ServiceTag entity.
func (stuo *ServiceTagUpdateOne) Save(ctx context.Context) (*ServiceTag, error) {
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ServiceTagUpdateOne) SaveX(ctx context.Context) *ServiceTag {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ServiceTagUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ServiceTagUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ServiceTagUpdateOne) check() error {
	if stuo.mutation.ServiceCleared() && len(stuo.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceTag.service"`)
	}
	if stuo.mutation.TagCleared() && len(stuo.mutation.TagIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceTag.tag"`)
	}
	return nil
}

func (stuo *ServiceTagUpdateOne) sqlSave(ctx context.Context) (_node *ServiceTag, err error) {
	if err := stuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servicetag.Table, servicetag.Columns, sqlgraph.NewFieldSpec(servicetag.FieldID, field.TypeUUID))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servicetag.FieldID)
		for _, f := range fields {
			if !servicetag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servicetag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if stuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetag.ServiceTable,
			Columns: []string{servicetag.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetag.ServiceTable,
			Columns: []string{servicetag.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetag.TagTable,
			Columns: []string{servicetag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tags.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetag.TagTable,
			Columns: []string{servicetag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tags.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceTag{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicetag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
