// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/google/uuid"
	"github.com/root9464/Ton-students/ent/schema"
	"github.com/root9464/Ton-students/ent/service"
	"github.com/root9464/Ton-students/ent/servicetag"
	"github.com/root9464/Ton-students/ent/tags"
	"github.com/root9464/Ton-students/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	serviceFields := schema.Service{}.Fields()
	_ = serviceFields
	// serviceDescTitle is the schema descriptor for title field.
	serviceDescTitle := serviceFields[2].Descriptor()
	// service.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	service.TitleValidator = serviceDescTitle.Validators[0].(func(string) error)
	// serviceDescDescription is the schema descriptor for description field.
	serviceDescDescription := serviceFields[3].Descriptor()
	// service.DefaultDescription holds the default value on creation for the description field.
	service.DefaultDescription = serviceDescDescription.Default.(map[string]interface{})
	// serviceDescID is the schema descriptor for id field.
	serviceDescID := serviceFields[0].Descriptor()
	// service.DefaultID holds the default value on creation for the id field.
	service.DefaultID = serviceDescID.Default.(func() uuid.UUID)
	servicetagFields := schema.ServiceTag{}.Fields()
	_ = servicetagFields
	// servicetagDescID is the schema descriptor for id field.
	servicetagDescID := servicetagFields[0].Descriptor()
	// servicetag.DefaultID holds the default value on creation for the id field.
	servicetag.DefaultID = servicetagDescID.Default.(func() uuid.UUID)
	tagsFields := schema.Tags{}.Fields()
	_ = tagsFields
	// tagsDescTagName is the schema descriptor for tagName field.
	tagsDescTagName := tagsFields[1].Descriptor()
	// tags.TagNameValidator is a validator for the "tagName" field. It is called by the builders before save.
	tags.TagNameValidator = tagsDescTagName.Validators[0].(func(string) error)
	// tagsDescID is the schema descriptor for id field.
	tagsDescID := tagsFields[0].Descriptor()
	// tags.DefaultID holds the default value on creation for the id field.
	tags.DefaultID = tagsDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescFirstname is the schema descriptor for firstname field.
	userDescFirstname := userFields[2].Descriptor()
	// user.DefaultFirstname holds the default value on creation for the firstname field.
	user.DefaultFirstname = userDescFirstname.Default.(string)
	// userDescLastname is the schema descriptor for lastname field.
	userDescLastname := userFields[3].Descriptor()
	// user.DefaultLastname holds the default value on creation for the lastname field.
	user.DefaultLastname = userDescLastname.Default.(string)
	// userDescNickname is the schema descriptor for nickname field.
	userDescNickname := userFields[4].Descriptor()
	// user.DefaultNickname holds the default value on creation for the nickname field.
	user.DefaultNickname = userDescNickname.Default.(string)
	// userDescInfo is the schema descriptor for info field.
	userDescInfo := userFields[7].Descriptor()
	// user.DefaultInfo holds the default value on creation for the info field.
	user.DefaultInfo = userDescInfo.Default.(map[string]interface{})
	// userDescIsPremium is the schema descriptor for isPremium field.
	userDescIsPremium := userFields[8].Descriptor()
	// user.DefaultIsPremium holds the default value on creation for the isPremium field.
	user.DefaultIsPremium = userDescIsPremium.Default.(bool)
	// userDescHash is the schema descriptor for hash field.
	userDescHash := userFields[9].Descriptor()
	// user.HashValidator is a validator for the "hash" field. It is called by the builders before save.
	user.HashValidator = func() func(string) error {
		validators := userDescHash.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(hash string) error {
			for _, fn := range fns {
				if err := fn(hash); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
