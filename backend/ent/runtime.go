// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/root9464/Ton-students/ent/schema"
	"github.com/root9464/Ton-students/ent/service"
	"github.com/root9464/Ton-students/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	serviceFields := schema.Service{}.Fields()
	_ = serviceFields
	// serviceDescUserName is the schema descriptor for userName field.
	serviceDescUserName := serviceFields[1].Descriptor()
	// service.UserNameValidator is a validator for the "userName" field. It is called by the builders before save.
	service.UserNameValidator = serviceDescUserName.Validators[0].(func(string) error)
	// serviceDescTitle is the schema descriptor for title field.
	serviceDescTitle := serviceFields[2].Descriptor()
	// service.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	service.TitleValidator = serviceDescTitle.Validators[0].(func(string) error)
	// serviceDescDescription is the schema descriptor for description field.
	serviceDescDescription := serviceFields[3].Descriptor()
	// service.DefaultDescription holds the default value on creation for the description field.
	service.DefaultDescription = serviceDescDescription.Default.(map[string]interface{})
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUserName is the schema descriptor for userName field.
	userDescUserName := userFields[1].Descriptor()
	// user.UserNameValidator is a validator for the "userName" field. It is called by the builders before save.
	user.UserNameValidator = userDescUserName.Validators[0].(func(string) error)
	// userDescFirstName is the schema descriptor for firstName field.
	userDescFirstName := userFields[2].Descriptor()
	// user.DefaultFirstName holds the default value on creation for the firstName field.
	user.DefaultFirstName = userDescFirstName.Default.(string)
	// userDescLastName is the schema descriptor for lastName field.
	userDescLastName := userFields[3].Descriptor()
	// user.DefaultLastName holds the default value on creation for the lastName field.
	user.DefaultLastName = userDescLastName.Default.(string)
	// userDescInfo is the schema descriptor for info field.
	userDescInfo := userFields[5].Descriptor()
	// user.DefaultInfo holds the default value on creation for the info field.
	user.DefaultInfo = userDescInfo.Default.(map[string]interface{})
	// userDescIsPremium is the schema descriptor for isPremium field.
	userDescIsPremium := userFields[6].Descriptor()
	// user.DefaultIsPremium holds the default value on creation for the isPremium field.
	user.DefaultIsPremium = userDescIsPremium.Default.(bool)
	// userDescHash is the schema descriptor for hash field.
	userDescHash := userFields[7].Descriptor()
	// user.HashValidator is a validator for the "hash" field. It is called by the builders before save.
	user.HashValidator = func() func(string) error {
		validators := userDescHash.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(hash string) error {
			for _, fn := range fns {
				if err := fn(hash); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
