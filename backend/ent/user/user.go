// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserName holds the string denoting the username field in the database.
	FieldUserName = "user_name"
	// FieldFirstName holds the string denoting the firstname field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the lastname field in the database.
	FieldLastName = "last_name"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldInfo holds the string denoting the info field in the database.
	FieldInfo = "info"
	// FieldIsPremium holds the string denoting the ispremium field in the database.
	FieldIsPremium = "is_premium"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUserName,
	FieldFirstName,
	FieldLastName,
	FieldRole,
	FieldInfo,
	FieldIsPremium,
	FieldHash,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UserNameValidator is a validator for the "userName" field. It is called by the builders before save.
	UserNameValidator func(string) error
	// DefaultFirstName holds the default value on creation for the "firstName" field.
	DefaultFirstName string
	// DefaultLastName holds the default value on creation for the "lastName" field.
	DefaultLastName string
	// DefaultInfo holds the default value on creation for the "info" field.
	DefaultInfo map[string]interface{}
	// DefaultIsPremium holds the default value on creation for the "isPremium" field.
	DefaultIsPremium bool
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func(string) error
)

// Role defines the type for the "role" enum field.
type Role string

// RoleUser is the default value of the Role enum.
const DefaultRole = RoleUser

// Role values.
const (
	RoleUser          Role = "user"
	RoleCreator       Role = "creator"
	RoleModerator     Role = "moderator"
	RoleAdministrator Role = "administrator"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleUser, RoleCreator, RoleModerator, RoleAdministrator:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserName orders the results by the userName field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByFirstName orders the results by the firstName field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the lastName field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByIsPremium orders the results by the isPremium field.
func ByIsPremium(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPremium, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}
