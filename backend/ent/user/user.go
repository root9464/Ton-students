// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldFirstname holds the string denoting the firstname field in the database.
	FieldFirstname = "firstname"
	// FieldLastname holds the string denoting the lastname field in the database.
	FieldLastname = "lastname"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldSelectedName holds the string denoting the selectedname field in the database.
	FieldSelectedName = "selected_name"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldInfo holds the string denoting the info field in the database.
	FieldInfo = "info"
	// FieldIsPremium holds the string denoting the ispremium field in the database.
	FieldIsPremium = "is_premium"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldFirstname,
	FieldLastname,
	FieldNickname,
	FieldSelectedName,
	FieldRole,
	FieldInfo,
	FieldIsPremium,
	FieldHash,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// DefaultFirstname holds the default value on creation for the "firstname" field.
	DefaultFirstname string
	// DefaultLastname holds the default value on creation for the "lastname" field.
	DefaultLastname string
	// DefaultNickname holds the default value on creation for the "nickname" field.
	DefaultNickname string
	// DefaultInfo holds the default value on creation for the "info" field.
	DefaultInfo map[string]interface{}
	// DefaultIsPremium holds the default value on creation for the "isPremium" field.
	DefaultIsPremium bool
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func(string) error
)

// SelectedName defines the type for the "selectedName" enum field.
type SelectedName string

// SelectedNameUsername is the default value of the SelectedName enum.
const DefaultSelectedName = SelectedNameUsername

// SelectedName values.
const (
	SelectedNameFirstname SelectedName = "firstname"
	SelectedNameLastname  SelectedName = "lastname"
	SelectedNameNickname  SelectedName = "nickname"
	SelectedNameUsername  SelectedName = "username"
)

func (sn SelectedName) String() string {
	return string(sn)
}

// SelectedNameValidator is a validator for the "selectedName" field enum values. It is called by the builders before save.
func SelectedNameValidator(sn SelectedName) error {
	switch sn {
	case SelectedNameFirstname, SelectedNameLastname, SelectedNameNickname, SelectedNameUsername:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for selectedName field: %q", sn)
	}
}

// Role defines the type for the "role" enum field.
type Role string

// RoleUser is the default value of the Role enum.
const DefaultRole = RoleUser

// Role values.
const (
	RoleUser          Role = "user"
	RoleCreator       Role = "creator"
	RoleModerator     Role = "moderator"
	RoleAdministrator Role = "administrator"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleUser, RoleCreator, RoleModerator, RoleAdministrator:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByFirstname orders the results by the firstname field.
func ByFirstname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstname, opts...).ToFunc()
}

// ByLastname orders the results by the lastname field.
func ByLastname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastname, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// BySelectedName orders the results by the selectedName field.
func BySelectedName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelectedName, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByIsPremium orders the results by the isPremium field.
func ByIsPremium(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPremium, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}
