// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/root9464/Ton-students/ent/predicate"
	"github.com/root9464/Ton-students/ent/service"
	"github.com/root9464/Ton-students/ent/servicetag"
	"github.com/root9464/Ton-students/ent/user"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUserID sets the "user_id" field.
func (su *ServiceUpdate) SetUserID(i int64) *ServiceUpdate {
	su.mutation.SetUserID(i)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableUserID(i *int64) *ServiceUpdate {
	if i != nil {
		su.SetUserID(*i)
	}
	return su
}

// SetTitle sets the "title" field.
func (su *ServiceUpdate) SetTitle(s string) *ServiceUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableTitle(s *string) *ServiceUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *ServiceUpdate) SetDescription(m map[string]interface{}) *ServiceUpdate {
	su.mutation.SetDescription(m)
	return su
}

// SetPrice sets the "price" field.
func (su *ServiceUpdate) SetPrice(i int16) *ServiceUpdate {
	su.mutation.ResetPrice()
	su.mutation.SetPrice(i)
	return su
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (su *ServiceUpdate) SetNillablePrice(i *int16) *ServiceUpdate {
	if i != nil {
		su.SetPrice(*i)
	}
	return su
}

// AddPrice adds i to the "price" field.
func (su *ServiceUpdate) AddPrice(i int16) *ServiceUpdate {
	su.mutation.AddPrice(i)
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *ServiceUpdate) SetUser(u *User) *ServiceUpdate {
	return su.SetUserID(u.ID)
}

// AddServiceTagIDs adds the "service_tags" edge to the ServiceTag entity by IDs.
func (su *ServiceUpdate) AddServiceTagIDs(ids ...uuid.UUID) *ServiceUpdate {
	su.mutation.AddServiceTagIDs(ids...)
	return su
}

// AddServiceTags adds the "service_tags" edges to the ServiceTag entity.
func (su *ServiceUpdate) AddServiceTags(s ...*ServiceTag) *ServiceUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddServiceTagIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (su *ServiceUpdate) Mutation() *ServiceMutation {
	return su.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (su *ServiceUpdate) ClearUser() *ServiceUpdate {
	su.mutation.ClearUser()
	return su
}

// ClearServiceTags clears all "service_tags" edges to the ServiceTag entity.
func (su *ServiceUpdate) ClearServiceTags() *ServiceUpdate {
	su.mutation.ClearServiceTags()
	return su
}

// RemoveServiceTagIDs removes the "service_tags" edge to ServiceTag entities by IDs.
func (su *ServiceUpdate) RemoveServiceTagIDs(ids ...uuid.UUID) *ServiceUpdate {
	su.mutation.RemoveServiceTagIDs(ids...)
	return su
}

// RemoveServiceTags removes "service_tags" edges to ServiceTag entities.
func (su *ServiceUpdate) RemoveServiceTags(s ...*ServiceTag) *ServiceUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveServiceTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ServiceUpdate) check() error {
	if v, ok := su.mutation.Title(); ok {
		if err := service.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Service.title": %w`, err)}
		}
	}
	if su.mutation.UserCleared() && len(su.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Service.user"`)
	}
	return nil
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(service.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(service.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.SetField(service.FieldPrice, field.TypeInt16, value)
	}
	if value, ok := su.mutation.AddedPrice(); ok {
		_spec.AddField(service.FieldPrice, field.TypeInt16, value)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.UserTable,
			Columns: []string{service.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.UserTable,
			Columns: []string{service.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ServiceTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   service.ServiceTagsTable,
			Columns: []string{service.ServiceTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedServiceTagsIDs(); len(nodes) > 0 && !su.mutation.ServiceTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   service.ServiceTagsTable,
			Columns: []string{service.ServiceTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServiceTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   service.ServiceTagsTable,
			Columns: []string{service.ServiceTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceMutation
}

// SetUserID sets the "user_id" field.
func (suo *ServiceUpdateOne) SetUserID(i int64) *ServiceUpdateOne {
	suo.mutation.SetUserID(i)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableUserID(i *int64) *ServiceUpdateOne {
	if i != nil {
		suo.SetUserID(*i)
	}
	return suo
}

// SetTitle sets the "title" field.
func (suo *ServiceUpdateOne) SetTitle(s string) *ServiceUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableTitle(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *ServiceUpdateOne) SetDescription(m map[string]interface{}) *ServiceUpdateOne {
	suo.mutation.SetDescription(m)
	return suo
}

// SetPrice sets the "price" field.
func (suo *ServiceUpdateOne) SetPrice(i int16) *ServiceUpdateOne {
	suo.mutation.ResetPrice()
	suo.mutation.SetPrice(i)
	return suo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillablePrice(i *int16) *ServiceUpdateOne {
	if i != nil {
		suo.SetPrice(*i)
	}
	return suo
}

// AddPrice adds i to the "price" field.
func (suo *ServiceUpdateOne) AddPrice(i int16) *ServiceUpdateOne {
	suo.mutation.AddPrice(i)
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *ServiceUpdateOne) SetUser(u *User) *ServiceUpdateOne {
	return suo.SetUserID(u.ID)
}

// AddServiceTagIDs adds the "service_tags" edge to the ServiceTag entity by IDs.
func (suo *ServiceUpdateOne) AddServiceTagIDs(ids ...uuid.UUID) *ServiceUpdateOne {
	suo.mutation.AddServiceTagIDs(ids...)
	return suo
}

// AddServiceTags adds the "service_tags" edges to the ServiceTag entity.
func (suo *ServiceUpdateOne) AddServiceTags(s ...*ServiceTag) *ServiceUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddServiceTagIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (suo *ServiceUpdateOne) Mutation() *ServiceMutation {
	return suo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (suo *ServiceUpdateOne) ClearUser() *ServiceUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// ClearServiceTags clears all "service_tags" edges to the ServiceTag entity.
func (suo *ServiceUpdateOne) ClearServiceTags() *ServiceUpdateOne {
	suo.mutation.ClearServiceTags()
	return suo
}

// RemoveServiceTagIDs removes the "service_tags" edge to ServiceTag entities by IDs.
func (suo *ServiceUpdateOne) RemoveServiceTagIDs(ids ...uuid.UUID) *ServiceUpdateOne {
	suo.mutation.RemoveServiceTagIDs(ids...)
	return suo
}

// RemoveServiceTags removes "service_tags" edges to ServiceTag entities.
func (suo *ServiceUpdateOne) RemoveServiceTags(s ...*ServiceTag) *ServiceUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveServiceTagIDs(ids...)
}

// Where appends a list predicates to the ServiceUpdate builder.
func (suo *ServiceUpdateOne) Where(ps ...predicate.Service) *ServiceUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServiceUpdateOne) Select(field string, fields ...string) *ServiceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Service entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ServiceUpdateOne) check() error {
	if v, ok := suo.mutation.Title(); ok {
		if err := service.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Service.title": %w`, err)}
		}
	}
	if suo.mutation.UserCleared() && len(suo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Service.user"`)
	}
	return nil
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (_node *Service, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Service.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, service.FieldID)
		for _, f := range fields {
			if !service.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != service.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(service.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(service.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.SetField(service.FieldPrice, field.TypeInt16, value)
	}
	if value, ok := suo.mutation.AddedPrice(); ok {
		_spec.AddField(service.FieldPrice, field.TypeInt16, value)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.UserTable,
			Columns: []string{service.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.UserTable,
			Columns: []string{service.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ServiceTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   service.ServiceTagsTable,
			Columns: []string{service.ServiceTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedServiceTagsIDs(); len(nodes) > 0 && !suo.mutation.ServiceTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   service.ServiceTagsTable,
			Columns: []string{service.ServiceTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServiceTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   service.ServiceTagsTable,
			Columns: []string{service.ServiceTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Service{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
