// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/root9464/Ton-students/ent/service"
	"github.com/root9464/Ton-students/ent/servicetag"
	"github.com/root9464/Ton-students/ent/tags"
)

// ServiceTagCreate is the builder for creating a ServiceTag entity.
type ServiceTagCreate struct {
	config
	mutation *ServiceTagMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (stc *ServiceTagCreate) SetID(u uuid.UUID) *ServiceTagCreate {
	stc.mutation.SetID(u)
	return stc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (stc *ServiceTagCreate) SetNillableID(u *uuid.UUID) *ServiceTagCreate {
	if u != nil {
		stc.SetID(*u)
	}
	return stc
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (stc *ServiceTagCreate) SetServiceID(id uuid.UUID) *ServiceTagCreate {
	stc.mutation.SetServiceID(id)
	return stc
}

// SetService sets the "service" edge to the Service entity.
func (stc *ServiceTagCreate) SetService(s *Service) *ServiceTagCreate {
	return stc.SetServiceID(s.ID)
}

// SetTagID sets the "tag" edge to the Tags entity by ID.
func (stc *ServiceTagCreate) SetTagID(id uuid.UUID) *ServiceTagCreate {
	stc.mutation.SetTagID(id)
	return stc
}

// SetTag sets the "tag" edge to the Tags entity.
func (stc *ServiceTagCreate) SetTag(t *Tags) *ServiceTagCreate {
	return stc.SetTagID(t.ID)
}

// Mutation returns the ServiceTagMutation object of the builder.
func (stc *ServiceTagCreate) Mutation() *ServiceTagMutation {
	return stc.mutation
}

// Save creates the ServiceTag in the database.
func (stc *ServiceTagCreate) Save(ctx context.Context) (*ServiceTag, error) {
	stc.defaults()
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *ServiceTagCreate) SaveX(ctx context.Context) *ServiceTag {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *ServiceTagCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *ServiceTagCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *ServiceTagCreate) defaults() {
	if _, ok := stc.mutation.ID(); !ok {
		v := servicetag.DefaultID()
		stc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *ServiceTagCreate) check() error {
	if len(stc.mutation.ServiceIDs()) == 0 {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required edge "ServiceTag.service"`)}
	}
	if len(stc.mutation.TagIDs()) == 0 {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required edge "ServiceTag.tag"`)}
	}
	return nil
}

func (stc *ServiceTagCreate) sqlSave(ctx context.Context) (*ServiceTag, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *ServiceTagCreate) createSpec() (*ServiceTag, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceTag{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(servicetag.Table, sqlgraph.NewFieldSpec(servicetag.FieldID, field.TypeUUID))
	)
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := stc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetag.ServiceTable,
			Columns: []string{servicetag.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_tag_service = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servicetag.TagTable,
			Columns: []string{servicetag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tags.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_tag_tag = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServiceTagCreateBulk is the builder for creating many ServiceTag entities in bulk.
type ServiceTagCreateBulk struct {
	config
	err      error
	builders []*ServiceTagCreate
}

// Save creates the ServiceTag entities in the database.
func (stcb *ServiceTagCreateBulk) Save(ctx context.Context) ([]*ServiceTag, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*ServiceTag, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *ServiceTagCreateBulk) SaveX(ctx context.Context) []*ServiceTag {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *ServiceTagCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *ServiceTagCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
