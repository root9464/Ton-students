// Code generated by ent, DO NOT EDIT.

package tags

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/root9464/Ton-students/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Tags {
	return predicate.Tags(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Tags {
	return predicate.Tags(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Tags {
	return predicate.Tags(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Tags {
	return predicate.Tags(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Tags {
	return predicate.Tags(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Tags {
	return predicate.Tags(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Tags {
	return predicate.Tags(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Tags {
	return predicate.Tags(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Tags {
	return predicate.Tags(sql.FieldLTE(FieldID, id))
}

// TagName applies equality check predicate on the "tagName" field. It's identical to TagNameEQ.
func TagName(v string) predicate.Tags {
	return predicate.Tags(sql.FieldEQ(FieldTagName, v))
}

// TagNameEQ applies the EQ predicate on the "tagName" field.
func TagNameEQ(v string) predicate.Tags {
	return predicate.Tags(sql.FieldEQ(FieldTagName, v))
}

// TagNameNEQ applies the NEQ predicate on the "tagName" field.
func TagNameNEQ(v string) predicate.Tags {
	return predicate.Tags(sql.FieldNEQ(FieldTagName, v))
}

// TagNameIn applies the In predicate on the "tagName" field.
func TagNameIn(vs ...string) predicate.Tags {
	return predicate.Tags(sql.FieldIn(FieldTagName, vs...))
}

// TagNameNotIn applies the NotIn predicate on the "tagName" field.
func TagNameNotIn(vs ...string) predicate.Tags {
	return predicate.Tags(sql.FieldNotIn(FieldTagName, vs...))
}

// TagNameGT applies the GT predicate on the "tagName" field.
func TagNameGT(v string) predicate.Tags {
	return predicate.Tags(sql.FieldGT(FieldTagName, v))
}

// TagNameGTE applies the GTE predicate on the "tagName" field.
func TagNameGTE(v string) predicate.Tags {
	return predicate.Tags(sql.FieldGTE(FieldTagName, v))
}

// TagNameLT applies the LT predicate on the "tagName" field.
func TagNameLT(v string) predicate.Tags {
	return predicate.Tags(sql.FieldLT(FieldTagName, v))
}

// TagNameLTE applies the LTE predicate on the "tagName" field.
func TagNameLTE(v string) predicate.Tags {
	return predicate.Tags(sql.FieldLTE(FieldTagName, v))
}

// TagNameContains applies the Contains predicate on the "tagName" field.
func TagNameContains(v string) predicate.Tags {
	return predicate.Tags(sql.FieldContains(FieldTagName, v))
}

// TagNameHasPrefix applies the HasPrefix predicate on the "tagName" field.
func TagNameHasPrefix(v string) predicate.Tags {
	return predicate.Tags(sql.FieldHasPrefix(FieldTagName, v))
}

// TagNameHasSuffix applies the HasSuffix predicate on the "tagName" field.
func TagNameHasSuffix(v string) predicate.Tags {
	return predicate.Tags(sql.FieldHasSuffix(FieldTagName, v))
}

// TagNameEqualFold applies the EqualFold predicate on the "tagName" field.
func TagNameEqualFold(v string) predicate.Tags {
	return predicate.Tags(sql.FieldEqualFold(FieldTagName, v))
}

// TagNameContainsFold applies the ContainsFold predicate on the "tagName" field.
func TagNameContainsFold(v string) predicate.Tags {
	return predicate.Tags(sql.FieldContainsFold(FieldTagName, v))
}

// HasServiceTags applies the HasEdge predicate on the "service_tags" edge.
func HasServiceTags() predicate.Tags {
	return predicate.Tags(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ServiceTagsTable, ServiceTagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceTagsWith applies the HasEdge predicate on the "service_tags" edge with a given conditions (other predicates).
func HasServiceTagsWith(preds ...predicate.ServiceTag) predicate.Tags {
	return predicate.Tags(func(s *sql.Selector) {
		step := newServiceTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tags) predicate.Tags {
	return predicate.Tags(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tags) predicate.Tags {
	return predicate.Tags(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tags) predicate.Tags {
	return predicate.Tags(sql.NotPredicates(p))
}
