// Code generated by ent, DO NOT EDIT.

package tags

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the tags type in the database.
	Label = "tags"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTagName holds the string denoting the tagname field in the database.
	FieldTagName = "tag_name"
	// EdgeServiceTags holds the string denoting the service_tags edge name in mutations.
	EdgeServiceTags = "service_tags"
	// Table holds the table name of the tags in the database.
	Table = "tags"
	// ServiceTagsTable is the table that holds the service_tags relation/edge.
	ServiceTagsTable = "service_tags"
	// ServiceTagsInverseTable is the table name for the ServiceTag entity.
	// It exists in this package in order to avoid circular dependency with the "servicetag" package.
	ServiceTagsInverseTable = "service_tags"
	// ServiceTagsColumn is the table column denoting the service_tags relation/edge.
	ServiceTagsColumn = "service_tag_tag"
)

// Columns holds all SQL columns for tags fields.
var Columns = []string{
	FieldID,
	FieldTagName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TagNameValidator is a validator for the "tagName" field. It is called by the builders before save.
	TagNameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Tags queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTagName orders the results by the tagName field.
func ByTagName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTagName, opts...).ToFunc()
}

// ByServiceTagsCount orders the results by service_tags count.
func ByServiceTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServiceTagsStep(), opts...)
	}
}

// ByServiceTags orders the results by service_tags terms.
func ByServiceTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newServiceTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceTagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ServiceTagsTable, ServiceTagsColumn),
	)
}
