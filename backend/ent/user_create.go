// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/root9464/Ton-students/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetFirstname sets the "firstname" field.
func (uc *UserCreate) SetFirstname(s string) *UserCreate {
	uc.mutation.SetFirstname(s)
	return uc
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (uc *UserCreate) SetNillableFirstname(s *string) *UserCreate {
	if s != nil {
		uc.SetFirstname(*s)
	}
	return uc
}

// SetLastname sets the "lastname" field.
func (uc *UserCreate) SetLastname(s string) *UserCreate {
	uc.mutation.SetLastname(s)
	return uc
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastname(s *string) *UserCreate {
	if s != nil {
		uc.SetLastname(*s)
	}
	return uc
}

// SetNickname sets the "nickname" field.
func (uc *UserCreate) SetNickname(s string) *UserCreate {
	uc.mutation.SetNickname(s)
	return uc
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uc *UserCreate) SetNillableNickname(s *string) *UserCreate {
	if s != nil {
		uc.SetNickname(*s)
	}
	return uc
}

// SetSelectedName sets the "selectedName" field.
func (uc *UserCreate) SetSelectedName(un user.SelectedName) *UserCreate {
	uc.mutation.SetSelectedName(un)
	return uc
}

// SetNillableSelectedName sets the "selectedName" field if the given value is not nil.
func (uc *UserCreate) SetNillableSelectedName(un *user.SelectedName) *UserCreate {
	if un != nil {
		uc.SetSelectedName(*un)
	}
	return uc
}

// SetRole sets the "role" field.
func (uc *UserCreate) SetRole(u user.Role) *UserCreate {
	uc.mutation.SetRole(u)
	return uc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uc *UserCreate) SetNillableRole(u *user.Role) *UserCreate {
	if u != nil {
		uc.SetRole(*u)
	}
	return uc
}

// SetInfo sets the "info" field.
func (uc *UserCreate) SetInfo(m map[string]interface{}) *UserCreate {
	uc.mutation.SetInfo(m)
	return uc
}

// SetIsPremium sets the "isPremium" field.
func (uc *UserCreate) SetIsPremium(b bool) *UserCreate {
	uc.mutation.SetIsPremium(b)
	return uc
}

// SetNillableIsPremium sets the "isPremium" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsPremium(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsPremium(*b)
	}
	return uc
}

// SetHash sets the "hash" field.
func (uc *UserCreate) SetHash(s string) *UserCreate {
	uc.mutation.SetHash(s)
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(i int64) *UserCreate {
	uc.mutation.SetID(i)
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.Firstname(); !ok {
		v := user.DefaultFirstname
		uc.mutation.SetFirstname(v)
	}
	if _, ok := uc.mutation.Lastname(); !ok {
		v := user.DefaultLastname
		uc.mutation.SetLastname(v)
	}
	if _, ok := uc.mutation.Nickname(); !ok {
		v := user.DefaultNickname
		uc.mutation.SetNickname(v)
	}
	if _, ok := uc.mutation.SelectedName(); !ok {
		v := user.DefaultSelectedName
		uc.mutation.SetSelectedName(v)
	}
	if _, ok := uc.mutation.Role(); !ok {
		v := user.DefaultRole
		uc.mutation.SetRole(v)
	}
	if _, ok := uc.mutation.Info(); !ok {
		v := user.DefaultInfo
		uc.mutation.SetInfo(v)
	}
	if _, ok := uc.mutation.IsPremium(); !ok {
		v := user.DefaultIsPremium
		uc.mutation.SetIsPremium(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if v, ok := uc.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Firstname(); !ok {
		return &ValidationError{Name: "firstname", err: errors.New(`ent: missing required field "User.firstname"`)}
	}
	if _, ok := uc.mutation.Lastname(); !ok {
		return &ValidationError{Name: "lastname", err: errors.New(`ent: missing required field "User.lastname"`)}
	}
	if _, ok := uc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "User.nickname"`)}
	}
	if _, ok := uc.mutation.SelectedName(); !ok {
		return &ValidationError{Name: "selectedName", err: errors.New(`ent: missing required field "User.selectedName"`)}
	}
	if v, ok := uc.mutation.SelectedName(); ok {
		if err := user.SelectedNameValidator(v); err != nil {
			return &ValidationError{Name: "selectedName", err: fmt.Errorf(`ent: validator failed for field "User.selectedName": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "User.role"`)}
	}
	if v, ok := uc.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Info(); !ok {
		return &ValidationError{Name: "info", err: errors.New(`ent: missing required field "User.info"`)}
	}
	if _, ok := uc.mutation.IsPremium(); !ok {
		return &ValidationError{Name: "isPremium", err: errors.New(`ent: missing required field "User.isPremium"`)}
	}
	if _, ok := uc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "User.hash"`)}
	}
	if v, ok := uc.mutation.Hash(); ok {
		if err := user.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "User.hash": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.Firstname(); ok {
		_spec.SetField(user.FieldFirstname, field.TypeString, value)
		_node.Firstname = value
	}
	if value, ok := uc.mutation.Lastname(); ok {
		_spec.SetField(user.FieldLastname, field.TypeString, value)
		_node.Lastname = value
	}
	if value, ok := uc.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := uc.mutation.SelectedName(); ok {
		_spec.SetField(user.FieldSelectedName, field.TypeEnum, value)
		_node.SelectedName = value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := uc.mutation.Info(); ok {
		_spec.SetField(user.FieldInfo, field.TypeJSON, value)
		_node.Info = value
	}
	if value, ok := uc.mutation.IsPremium(); ok {
		_spec.SetField(user.FieldIsPremium, field.TypeBool, value)
		_node.IsPremium = value
	}
	if value, ok := uc.mutation.Hash(); ok {
		_spec.SetField(user.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
